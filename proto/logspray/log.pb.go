// Code generated by protoc-gen-go.
// source: log.proto
// DO NOT EDIT!

/*
Package logspray is a generated protocol buffer package.

It is generated from these files:
	log.proto

It has these top-level messages:
	Message
	LogSummary
	TailRequest
	LabelsRequest
	LabelsResponse
	LabelValuesRequest
	LabelValuesResponse
	SearchRequest
	SearchResponse
*/
package logspray

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message_ControlMessage int32

const (
	Message_NONE      Message_ControlMessage = 0
	Message_OK        Message_ControlMessage = 1
	Message_ERROR     Message_ControlMessage = 2
	Message_SETHEADER Message_ControlMessage = 3
	Message_STREAMEND Message_ControlMessage = 4
)

var Message_ControlMessage_name = map[int32]string{
	0: "NONE",
	1: "OK",
	2: "ERROR",
	3: "SETHEADER",
	4: "STREAMEND",
}
var Message_ControlMessage_value = map[string]int32{
	"NONE":      0,
	"OK":        1,
	"ERROR":     2,
	"SETHEADER": 3,
	"STREAMEND": 4,
}

func (x Message_ControlMessage) String() string {
	return proto.EnumName(Message_ControlMessage_name, int32(x))
}
func (Message_ControlMessage) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// Message
type Message struct {
	Time           *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Labels         map[string]string           `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Setheader      bool                        `protobuf:"varint,3,opt,name=setheader" json:"setheader,omitempty"`
	Text           string                      `protobuf:"bytes,4,opt,name=text" json:"text,omitempty"`
	ControlMessage Message_ControlMessage      `protobuf:"varint,5,opt,name=control_message,json=controlMessage,enum=logspray.Message_ControlMessage" json:"control_message,omitempty"`
	StreamID       string                      `protobuf:"bytes,6,opt,name=StreamID" json:"StreamID,omitempty"`
	Index          uint64                      `protobuf:"varint,7,opt,name=Index" json:"Index,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *Message) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *Message) GetSetheader() bool {
	if m != nil {
		return m.Setheader
	}
	return false
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Message) GetControlMessage() Message_ControlMessage {
	if m != nil {
		return m.ControlMessage
	}
	return Message_NONE
}

func (m *Message) GetStreamID() string {
	if m != nil {
		return m.StreamID
	}
	return ""
}

func (m *Message) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// LogSummary
type LogSummary struct {
	Count int64 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *LogSummary) Reset()                    { *m = LogSummary{} }
func (m *LogSummary) String() string            { return proto.CompactTextString(m) }
func (*LogSummary) ProtoMessage()               {}
func (*LogSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LogSummary) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TailRequest
type TailRequest struct {
	Max   int64  `protobuf:"varint,1,opt,name=max" json:"max,omitempty"`
	Query string `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
}

func (m *TailRequest) Reset()                    { *m = TailRequest{} }
func (m *TailRequest) String() string            { return proto.CompactTextString(m) }
func (*TailRequest) ProtoMessage()               {}
func (*TailRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TailRequest) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *TailRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// LabelsRequest
type LabelsRequest struct {
	From *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To   *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
}

func (m *LabelsRequest) Reset()                    { *m = LabelsRequest{} }
func (m *LabelsRequest) String() string            { return proto.CompactTextString(m) }
func (*LabelsRequest) ProtoMessage()               {}
func (*LabelsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LabelsRequest) GetFrom() *google_protobuf1.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *LabelsRequest) GetTo() *google_protobuf1.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

// LabelsResponse
type LabelsResponse struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *LabelsResponse) Reset()                    { *m = LabelsResponse{} }
func (m *LabelsResponse) String() string            { return proto.CompactTextString(m) }
func (*LabelsResponse) ProtoMessage()               {}
func (*LabelsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LabelsResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

// LabelValuesRequest
type LabelValuesRequest struct {
	From  *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To    *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Name  string                      `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Count int64                       `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
}

func (m *LabelValuesRequest) Reset()                    { *m = LabelValuesRequest{} }
func (m *LabelValuesRequest) String() string            { return proto.CompactTextString(m) }
func (*LabelValuesRequest) ProtoMessage()               {}
func (*LabelValuesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LabelValuesRequest) GetFrom() *google_protobuf1.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *LabelValuesRequest) GetTo() *google_protobuf1.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *LabelValuesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LabelValuesRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// LabelValuesResponse
type LabelValuesResponse struct {
	Values        []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	TotalHitCount uint64   `protobuf:"varint,2,opt,name=total_hit_count,json=totalHitCount" json:"total_hit_count,omitempty"`
}

func (m *LabelValuesResponse) Reset()                    { *m = LabelValuesResponse{} }
func (m *LabelValuesResponse) String() string            { return proto.CompactTextString(m) }
func (*LabelValuesResponse) ProtoMessage()               {}
func (*LabelValuesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LabelValuesResponse) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *LabelValuesResponse) GetTotalHitCount() uint64 {
	if m != nil {
		return m.TotalHitCount
	}
	return 0
}

// SearchRequest
type SearchRequest struct {
	From    *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To      *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Query   string                      `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
	Count   uint64                      `protobuf:"varint,4,opt,name=count" json:"count,omitempty"`
	Offset  uint64                      `protobuf:"varint,5,opt,name=offset" json:"offset,omitempty"`
	Reverse bool                        `protobuf:"varint,6,opt,name=reverse" json:"reverse,omitempty"`
}

func (m *SearchRequest) Reset()                    { *m = SearchRequest{} }
func (m *SearchRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()               {}
func (*SearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SearchRequest) GetFrom() *google_protobuf1.Timestamp {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SearchRequest) GetTo() *google_protobuf1.Timestamp {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SearchRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *SearchRequest) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SearchRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchRequest) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

// SearchResponse
type SearchResponse struct {
	Messages      []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
	TotalHitCount uint64     `protobuf:"varint,2,opt,name=total_hit_count,json=totalHitCount" json:"total_hit_count,omitempty"`
}

func (m *SearchResponse) Reset()                    { *m = SearchResponse{} }
func (m *SearchResponse) String() string            { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()               {}
func (*SearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SearchResponse) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

func (m *SearchResponse) GetTotalHitCount() uint64 {
	if m != nil {
		return m.TotalHitCount
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "logspray.Message")
	proto.RegisterType((*LogSummary)(nil), "logspray.LogSummary")
	proto.RegisterType((*TailRequest)(nil), "logspray.TailRequest")
	proto.RegisterType((*LabelsRequest)(nil), "logspray.LabelsRequest")
	proto.RegisterType((*LabelsResponse)(nil), "logspray.LabelsResponse")
	proto.RegisterType((*LabelValuesRequest)(nil), "logspray.LabelValuesRequest")
	proto.RegisterType((*LabelValuesResponse)(nil), "logspray.LabelValuesResponse")
	proto.RegisterType((*SearchRequest)(nil), "logspray.SearchRequest")
	proto.RegisterType((*SearchResponse)(nil), "logspray.SearchResponse")
	proto.RegisterEnum("logspray.Message_ControlMessage", Message_ControlMessage_name, Message_ControlMessage_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LogService service

type LogServiceClient interface {
	// LogStream ingests the stream of messages
	// The first message sent in a stream should set
	// an initial set of default labels. You must provide a UUID
	// for the stream, and each message should include an incrementing
	// index into that stream.
	//   The client assign the UUID, and Index, rather than the server,
	// making it the singe source of truth for a given log item, and allowing
	// potential deduplication of log itmes later on.
	LogStream(ctx context.Context, opts ...grpc.CallOption) (LogService_LogStreamClient, error)
	// Log logs an individual message.
	Log(ctx context.Context, in *Message, opts ...grpc.CallOption) (*LogSummary, error)
	// Tail returns a stream of log data that matches the
	// query in the TailRequest. When reading the stream
	// clients should pay attention to ControlMessage_SETHEADER
	// events which include the base sets of labels for a stream.
	// These labels should be added to log entries associated with
	// that stream.
	Tail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (LogService_TailClient, error)
	// Search takes a string query
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// SearchStream takes a string query and returns results as a stream.
	SearchStream(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (LogService_SearchStreamClient, error)
	// Labels returns the set of labels known in the current index
	// active index.
	Labels(ctx context.Context, in *LabelsRequest, opts ...grpc.CallOption) (*LabelsResponse, error)
	// LabelsValue returns the set of values for a label  known in the current
	// index active index. (from/to are currently ignored)
	LabelValues(ctx context.Context, in *LabelValuesRequest, opts ...grpc.CallOption) (*LabelValuesResponse, error)
}

type logServiceClient struct {
	cc *grpc.ClientConn
}

func NewLogServiceClient(cc *grpc.ClientConn) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) LogStream(ctx context.Context, opts ...grpc.CallOption) (LogService_LogStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LogService_serviceDesc.Streams[0], c.cc, "/logspray.LogService/LogStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceLogStreamClient{stream}
	return x, nil
}

type LogService_LogStreamClient interface {
	Send(*Message) error
	CloseAndRecv() (*LogSummary, error)
	grpc.ClientStream
}

type logServiceLogStreamClient struct {
	grpc.ClientStream
}

func (x *logServiceLogStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceLogStreamClient) CloseAndRecv() (*LogSummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LogSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) Log(ctx context.Context, in *Message, opts ...grpc.CallOption) (*LogSummary, error) {
	out := new(LogSummary)
	err := grpc.Invoke(ctx, "/logspray.LogService/Log", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) Tail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (LogService_TailClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LogService_serviceDesc.Streams[1], c.cc, "/logspray.LogService/Tail", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceTailClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_TailClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type logServiceTailClient struct {
	grpc.ClientStream
}

func (x *logServiceTailClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := grpc.Invoke(ctx, "/logspray.LogService/Search", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) SearchStream(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (LogService_SearchStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_LogService_serviceDesc.Streams[2], c.cc, "/logspray.LogService/SearchStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceSearchStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LogService_SearchStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type logServiceSearchStreamClient struct {
	grpc.ClientStream
}

func (x *logServiceSearchStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *logServiceClient) Labels(ctx context.Context, in *LabelsRequest, opts ...grpc.CallOption) (*LabelsResponse, error) {
	out := new(LabelsResponse)
	err := grpc.Invoke(ctx, "/logspray.LogService/Labels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logServiceClient) LabelValues(ctx context.Context, in *LabelValuesRequest, opts ...grpc.CallOption) (*LabelValuesResponse, error) {
	out := new(LabelValuesResponse)
	err := grpc.Invoke(ctx, "/logspray.LogService/LabelValues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogService service

type LogServiceServer interface {
	// LogStream ingests the stream of messages
	// The first message sent in a stream should set
	// an initial set of default labels. You must provide a UUID
	// for the stream, and each message should include an incrementing
	// index into that stream.
	//   The client assign the UUID, and Index, rather than the server,
	// making it the singe source of truth for a given log item, and allowing
	// potential deduplication of log itmes later on.
	LogStream(LogService_LogStreamServer) error
	// Log logs an individual message.
	Log(context.Context, *Message) (*LogSummary, error)
	// Tail returns a stream of log data that matches the
	// query in the TailRequest. When reading the stream
	// clients should pay attention to ControlMessage_SETHEADER
	// events which include the base sets of labels for a stream.
	// These labels should be added to log entries associated with
	// that stream.
	Tail(*TailRequest, LogService_TailServer) error
	// Search takes a string query
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// SearchStream takes a string query and returns results as a stream.
	SearchStream(*SearchRequest, LogService_SearchStreamServer) error
	// Labels returns the set of labels known in the current index
	// active index.
	Labels(context.Context, *LabelsRequest) (*LabelsResponse, error)
	// LabelsValue returns the set of values for a label  known in the current
	// index active index. (from/to are currently ignored)
	LabelValues(context.Context, *LabelValuesRequest) (*LabelValuesResponse, error)
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_LogStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).LogStream(&logServiceLogStreamServer{stream})
}

type LogService_LogStreamServer interface {
	SendAndClose(*LogSummary) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type logServiceLogStreamServer struct {
	grpc.ServerStream
}

func (x *logServiceLogStreamServer) SendAndClose(m *LogSummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceLogStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LogService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logspray.LogService/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).Log(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_Tail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).Tail(m, &logServiceTailServer{stream})
}

type LogService_TailServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type logServiceTailServer struct {
	grpc.ServerStream
}

func (x *logServiceTailServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _LogService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logspray.LogService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_SearchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LogServiceServer).SearchStream(m, &logServiceSearchStreamServer{stream})
}

type LogService_SearchStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type logServiceSearchStreamServer struct {
	grpc.ServerStream
}

func (x *logServiceSearchStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _LogService_Labels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).Labels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logspray.LogService/Labels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).Labels(ctx, req.(*LabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogService_LabelValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabelValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).LabelValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logspray.LogService/LabelValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).LabelValues(ctx, req.(*LabelValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logspray.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Log",
			Handler:    _LogService_Log_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _LogService_Search_Handler,
		},
		{
			MethodName: "Labels",
			Handler:    _LogService_Labels_Handler,
		},
		{
			MethodName: "LabelValues",
			Handler:    _LogService_LabelValues_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LogStream",
			Handler:       _LogService_LogStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Tail",
			Handler:       _LogService_Tail_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchStream",
			Handler:       _LogService_SearchStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "log.proto",
}

func init() { proto.RegisterFile("log.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 832 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x54, 0x5f, 0x4f, 0x1b, 0x47,
	0x10, 0xef, 0xfd, 0xc1, 0xd8, 0xe3, 0x60, 0x9c, 0x49, 0xda, 0x5c, 0x4e, 0x44, 0xb2, 0xee, 0x01,
	0x59, 0x48, 0xb9, 0x4b, 0x5d, 0xd1, 0x3f, 0x48, 0x7d, 0x48, 0x83, 0xa5, 0x20, 0x08, 0xa8, 0x0b,
	0xed, 0x2b, 0x5a, 0xcc, 0x72, 0x58, 0xdc, 0xdd, 0x3a, 0xb7, 0x6b, 0x04, 0x42, 0x3c, 0xb4, 0x5f,
	0xa1, 0x6f, 0xfd, 0x02, 0xfd, 0x2c, 0x7d, 0xce, 0x57, 0xe8, 0x07, 0xa9, 0x76, 0xf6, 0x8c, 0xed,
	0xba, 0x89, 0xc8, 0x0b, 0x6f, 0xfb, 0xdb, 0x99, 0xfd, 0xfd, 0x66, 0x66, 0x67, 0x06, 0x1a, 0x99,
	0x4c, 0xe3, 0x51, 0x29, 0xb5, 0xc4, 0x7a, 0x26, 0x53, 0x35, 0x2a, 0xf9, 0x75, 0xb8, 0x96, 0x4a,
	0x99, 0x66, 0x22, 0xe1, 0xa3, 0x61, 0xc2, 0x8b, 0x42, 0x6a, 0xae, 0x87, 0xb2, 0x50, 0xd6, 0x2f,
	0x7c, 0xae, 0x87, 0xb9, 0x50, 0x9a, 0xe7, 0xa3, 0xe4, 0xee, 0x64, 0x4d, 0xd1, 0x5f, 0x1e, 0x2c,
	0xbf, 0x13, 0x4a, 0xf1, 0x54, 0x60, 0x0c, 0xbe, 0x31, 0x07, 0x4e, 0xc7, 0xe9, 0x36, 0x7b, 0x61,
	0x6c, 0x39, 0xad, 0xe3, 0xc9, 0xf8, 0x2c, 0x3e, 0x9a, 0xbc, 0x65, 0xe4, 0x87, 0x9b, 0x50, 0xcb,
	0xf8, 0x89, 0xc8, 0x54, 0xe0, 0x76, 0xbc, 0x6e, 0xb3, 0xf7, 0x22, 0x9e, 0xc4, 0x13, 0x57, 0x94,
	0xf1, 0x1e, 0xd9, 0xfb, 0x85, 0x2e, 0xaf, 0x59, 0xe5, 0x8c, 0x6b, 0xd0, 0x50, 0x42, 0x9f, 0x0b,
	0x7e, 0x2a, 0xca, 0xc0, 0xeb, 0x38, 0xdd, 0x3a, 0x9b, 0x5e, 0x20, 0x82, 0xaf, 0xc5, 0x95, 0x0e,
	0xfc, 0x8e, 0xd3, 0x6d, 0x30, 0x3a, 0xe3, 0x0e, 0xac, 0x0e, 0x64, 0xa1, 0x4b, 0x99, 0x1d, 0xe7,
	0x96, 0x38, 0x58, 0xea, 0x38, 0xdd, 0x56, 0xaf, 0xb3, 0xa8, 0xf8, 0xc6, 0x3a, 0x56, 0x90, 0xb5,
	0x06, 0x73, 0x18, 0x43, 0xa8, 0x1f, 0xea, 0x52, 0xf0, 0x7c, 0x67, 0x3b, 0xa8, 0x91, 0xc4, 0x1d,
	0xc6, 0xa7, 0xb0, 0xb4, 0x53, 0x9c, 0x8a, 0xab, 0x60, 0xb9, 0xe3, 0x74, 0x7d, 0x66, 0x41, 0xf8,
	0x03, 0x34, 0x67, 0xb2, 0xc0, 0x36, 0x78, 0x17, 0xe2, 0x9a, 0x6a, 0xd4, 0x60, 0xe6, 0x68, 0x9e,
	0x5d, 0xf2, 0x6c, 0x2c, 0x02, 0x97, 0xee, 0x2c, 0xd8, 0x72, 0xbf, 0x77, 0xa2, 0x5d, 0x68, 0xcd,
	0x87, 0x83, 0x75, 0xf0, 0xf7, 0x0f, 0xf6, 0xfb, 0xed, 0x2f, 0xb0, 0x06, 0xee, 0xc1, 0x6e, 0xdb,
	0xc1, 0x06, 0x2c, 0xf5, 0x19, 0x3b, 0x60, 0x6d, 0x17, 0x57, 0xa0, 0x71, 0xd8, 0x3f, 0x7a, 0xdb,
	0x7f, 0xbd, 0xdd, 0x67, 0x6d, 0x8f, 0xe0, 0x11, 0xeb, 0xbf, 0x7e, 0xd7, 0xdf, 0xdf, 0x6e, 0xfb,
	0x51, 0x04, 0xb0, 0x27, 0xd3, 0xc3, 0x71, 0x9e, 0xf3, 0x92, 0x44, 0x07, 0x72, 0x5c, 0x68, 0x0a,
	0xc4, 0x63, 0x16, 0x44, 0x9b, 0xd0, 0x3c, 0xe2, 0xc3, 0x8c, 0x89, 0xf7, 0x63, 0xa1, 0xb4, 0x89,
	0x35, 0xe7, 0x57, 0x95, 0x8b, 0x39, 0x9a, 0x67, 0xef, 0xc7, 0xa2, 0xbc, 0x9e, 0xc4, 0x4a, 0x20,
	0xba, 0x80, 0x15, 0x9b, 0xe2, 0xe4, 0x61, 0x0c, 0xfe, 0x59, 0x29, 0xf3, 0xfb, 0x74, 0x82, 0xf1,
	0xc3, 0x0d, 0x70, 0xb5, 0x24, 0xce, 0x4f, 0x7b, 0xbb, 0x5a, 0x46, 0xeb, 0xd0, 0x9a, 0x88, 0xa9,
	0x91, 0x2c, 0x94, 0x30, 0x41, 0x15, 0x3c, 0x17, 0x2a, 0x70, 0x3a, 0x9e, 0x09, 0x8a, 0x40, 0xf4,
	0xa7, 0x03, 0x48, 0x8e, 0xbf, 0x9a, 0x7a, 0x3e, 0x44, 0x68, 0xa6, 0xf7, 0x8c, 0x36, 0x35, 0x65,
	0x83, 0xd1, 0x79, 0x5a, 0x68, 0x7f, 0xb6, 0xd0, 0xbf, 0xc0, 0x93, 0xb9, 0xd8, 0xaa, 0x4c, 0xbe,
	0x82, 0x1a, 0xfd, 0xfe, 0x24, 0x95, 0x0a, 0xe1, 0x3a, 0xac, 0x6a, 0xa9, 0x79, 0x76, 0x7c, 0x3e,
	0xd4, 0xc7, 0x96, 0xce, 0xa5, 0x1e, 0x5b, 0xa1, 0xeb, 0xb7, 0x43, 0xfd, 0x86, 0x68, 0xff, 0x76,
	0x60, 0xe5, 0x50, 0xf0, 0x72, 0x70, 0xfe, 0x10, 0xe9, 0xde, 0x35, 0x83, 0x37, 0xd3, 0x0c, 0xf3,
	0x09, 0xfb, 0x55, 0xc2, 0x26, 0x33, 0x79, 0x76, 0xa6, 0x84, 0xa6, 0xc9, 0xf3, 0x59, 0x85, 0x30,
	0x80, 0xe5, 0x52, 0x5c, 0x8a, 0x52, 0x09, 0x1a, 0xa7, 0x3a, 0x9b, 0xc0, 0x28, 0x85, 0xd6, 0x24,
	0x95, 0xaa, 0x3a, 0x2f, 0xa1, 0x5e, 0x8d, 0xaf, 0xad, 0x4f, 0xb3, 0xf7, 0x78, 0x61, 0x7e, 0xd9,
	0x9d, 0xcb, 0x7d, 0x8b, 0xd6, 0xfb, 0xb0, 0x64, 0x27, 0x43, 0x94, 0x97, 0xc3, 0x81, 0xc0, 0x9f,
	0xa1, 0x61, 0x10, 0x0d, 0x35, 0x2e, 0x0a, 0x84, 0x4f, 0xa7, 0x57, 0xd3, 0x79, 0x8a, 0x9e, 0xff,
	0xfe, 0xe1, 0x9f, 0x3f, 0xdc, 0x27, 0x51, 0x2b, 0xb9, 0xfc, 0x3a, 0xc9, 0x64, 0x9a, 0x28, 0x22,
	0xd8, 0x72, 0x36, 0xba, 0x0e, 0xfe, 0x04, 0xde, 0x9e, 0x4c, 0xef, 0x4f, 0x86, 0x44, 0xf6, 0x28,
	0x5a, 0xae, 0xc8, 0xb6, 0x9c, 0x0d, 0xdc, 0x05, 0xdf, 0x8c, 0x26, 0x7e, 0x39, 0x7d, 0x31, 0x33,
	0xaa, 0xe1, 0x22, 0x77, 0xf4, 0x8c, 0x58, 0x1e, 0xe3, 0xaa, 0x61, 0xd1, 0x7c, 0x98, 0x55, 0x31,
	0xbd, 0x72, 0x50, 0x41, 0xcd, 0xd6, 0x16, 0x9f, 0x4d, 0xdf, 0xcd, 0x35, 0x4e, 0x18, 0x2c, 0x1a,
	0xec, 0x37, 0x44, 0xdf, 0x12, 0xef, 0x2b, 0x8c, 0x0d, 0xaf, 0x22, 0x5b, 0x72, 0x63, 0x9a, 0x27,
	0x56, 0x62, 0x20, 0x8b, 0x53, 0x75, 0x9b, 0xdc, 0x68, 0x39, 0x03, 0xa8, 0x2f, 0x6e, 0xf1, 0x06,
	0x1e, 0x59, 0xa6, 0xaa, 0xb6, 0x1f, 0x95, 0xfe, 0x9f, 0x5c, 0x7e, 0x24, 0xcd, 0xef, 0x70, 0xf3,
	0xf3, 0x34, 0xa7, 0x19, 0x5f, 0x40, 0xcd, 0x6e, 0x8d, 0x59, 0xd9, 0xb9, 0xa5, 0x35, 0x9b, 0xf1,
	0xfc, 0x82, 0x89, 0x62, 0x52, 0xef, 0xe2, 0x3a, 0xfd, 0x07, 0xd9, 0x3e, 0xa5, 0x8e, 0xbf, 0x39,
	0xd5, 0xce, 0xb7, 0xe3, 0x8d, 0x6b, 0xff, 0x61, 0x9e, 0xdb, 0x48, 0xe1, 0x8b, 0x8f, 0x58, 0x2b,
	0xf1, 0x4d, 0x12, 0x4f, 0xf0, 0xe5, 0xfd, 0xc4, 0x93, 0x1b, 0xb3, 0x76, 0x6e, 0x4f, 0x6a, 0x34,
	0xb4, 0xdf, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xc7, 0x57, 0xee, 0xef, 0x07, 0x00, 0x00,
}
